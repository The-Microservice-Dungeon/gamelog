asyncapi: '2.2.0'
info:
  title: GameLog
  version: '0.2.0'
  description: |
    # ðŸš§ As of now we do not offer event interfaces

defaultContentType: application/json

channels: {}

components:
  messageTraits:
    CommonHeaders:
      headers:
        type: object
        properties:
          eventId:
            type: string
            format: uuid
            description: Generated UUID of the event
            example: 5bc9f935-32f1-4d7b-a90c-ff0e6e34125a
          transactionId:
            type: string
            format: uuid
            description: TransactionID if available or UUID of the entity concerned
            example: 0cfc04f1-6df5-42c6-a19a-146128b8a3b4
          version:
            type: integer
            description: Consecutive number for the comparability of the actuality of the event
            example: 42
          timestamp:
            type: string
            format: date-time
            description: >
              timestamp as specified in [time-format-decision](https://the-microservice-dungeon.github.io/decisionlog/decisions/time-format.html)
            example: 2020-01-10T12:00:00Z
          type:
            type: string
            description: The type of event
            example: event-example-uploaded
  messages:
    ExampleMessage:
      description: >
        Example message component to clarify the structure of AsyncAPI 
        with schema definitions
      traits:
        - $ref: '#/components/messageTraits/CommonHeaders'
      payload:
        $ref: '#/components/schemas/ExampleEventSchema'
  schemas:
    ExampleEventSchema:
      description: >
        Schema definition to clarify how to use the base event schema definition
        with a custom payload object.
      type: object
      required:
        - id
        - field
      properties:
        id:
          type: string
          format: uuid
          example: 0cfc04f1-6df5-42c6-a19a-146128b8a3b4
        field:
          type: string
          example: This is a field and it contains a string